AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for deploying a separate API Gateway linked to a Lambda function - we could also have a separate yml if we have multiple lambdas

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - development
      - staging
      - production
    Description: "The environment for the deployment (development, staging, production)"

Globals:
  Function:
    Timeout: 10

Conditions:
  IsProduction: !Equals [ !Ref Environment, "production" ]

Resources:
  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "lambda-api-publico-${Environment}"
      Description: !Sub "A lambda function for api publico in ${Environment}"
      CodeUri: lambda_api_publico/
      Handler: api_publico.lambda_handler
      Runtime: python3.11
      Architectures: [arm64]
      MemorySize: 128
      AutoPublishAlias: live
      DeploymentPreference:
        Enabled: !If [ IsProduction, true, false ]
        Type: !If [ IsProduction, "Canary10Percent30Minutes", "AllAtOnce" ]
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Sid: ApiGatewayExecutionPermission
            Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt MyApiGateway.Arn
      Tags:
        owner: "parriola"
        team: "devops"
        scope: !Ref Environment

  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Sub "API Gateway for Lambda ${Environment}"
          version: "1.0"
        paths:
          /example:
            get:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations"

Outputs:
  LambdaFunctionArn:
    Description: "Lambda Function ARN"
    Value: !GetAtt MyLambdaFunction.Arn

  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/v1"
